@page "/patientDetails"
<h3>Patient Details</h3>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                
                
                <MudTextField T="string" Label="Patient Name" Required="true" RequiredError="Patient name is required!" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                

                <MudSelect T="string" Label="Select Symptoms " AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Headache")" />
                    <MudSelectItem Value="@("Fever")" />
                    <MudSelectItem Value="@("Sore Throat")" />
                    <MudSelectItem Value="@("Other")" />
                </MudSelect>
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Gender is required!">
                        <MudRadio Option="@("Personal")">Female</MudRadio>
                        <MudRadio Option="@("Professional")">Male</MudRadio>
                    </MudRadioGroup>
                </div>
                <MudTextField T="Int16" Label="Patient Age" Required="true" RequiredError="Age is required!" />
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        @*<MudPaper Class="pa-4"></MudPaper>*@
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}

